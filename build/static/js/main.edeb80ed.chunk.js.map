{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","checkHealthReducer","state","action","type","isLoading","isError","data","payload","Error","App","useState","checkHealth","setCheckHealth","useReducer","dispatch","useEffect","a","axios","res","console","log","callCheckHealth","className","src","logo","alt","href","target","rel","onClick","status","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,kC,kPCMrCC,EAAqB,SAACC,EAAOC,GAC/B,OAAQA,EAAOC,MACX,IAAK,OACD,OAAO,2BACAF,GADP,IAEIG,WAAW,EACXC,SAAS,IAEjB,IAAK,UACD,OAAO,2BACAJ,GADP,IAEIG,WAAW,EACXC,SAAS,EACTC,KAAMJ,EAAOK,UAErB,IAAK,UACD,OAAO,2BACAN,GADP,IAEIG,WAAW,EACXC,SAAS,IAEjB,QACI,MAAM,IAAIG,QAqEPC,MAjEf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEeC,qBAAWb,EAAoB,CACrDI,WAAW,EACXC,SAAS,EACTC,KAAM,CAAC,OAAS,MALT,mBAEJL,EAFI,KAEGa,EAFH,KA2Cb,OAnCEC,qBAAU,WA0BFJ,GAzBiB,uCAAG,4BAAAK,EAAA,6DACpBF,EAAS,CACLX,KAAM,SAFU,SAKJ,6DACI,CACZ,OAAU,mBACV,eAAgB,oBARJ,SAUEc,IALN,8DALI,OAUVC,EAVU,OAWhBC,QAAQC,IAAI,gCAAgCF,EAAIZ,MAChDQ,EAAS,CACLX,KAAM,UACNI,QAASW,EAAIZ,OAEjBM,GAAe,GAhBC,kDAmBhBE,EAAS,CACLX,KAAM,YApBM,0DAAH,oDA0BjBkB,KAGL,CAACV,IAMJ,yBAAKW,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,4BAAQC,QAlBkB,WAC9BjB,GAAe,KAiBX,gBACA,gDAAsBX,EAAMK,KAAKwB,WC/ErBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.edeb80ed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect, useReducer } from 'react'\nimport axios from 'axios'\n\nconst checkHealthReducer = (state, action) => {\n    switch (action.type) {\n        case \"INIT\":\n            return {\n                ...state,\n                isLoading: true,\n                isError: false\n            }\n        case \"SUCCESS\":\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: action.payload\n            }\n        case \"FAILURE\":\n            return {\n                ...state,\n                isLoading: false,\n                isError: true\n            }\n        default:\n            throw new Error()\n    }\n}\n\nfunction App() {\n  const [checkHealth, setCheckHealth] = useState(false)\n    const [state, dispatch] = useReducer(checkHealthReducer, {\n        isLoading: false,\n        isError: false,\n        data: {\"status\":\"\"}\n    })\n\n    useEffect(() => {\n        const callCheckHealth = async () => {\n            dispatch({\n                type: \"INIT\"\n            })\n            try {\n                const url = \"http://triple-hour-287219.uc.r.appspot.com/api/checkHealth\"\n                const headers = {\n                    \"Accept\": \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                }\n                const res = await axios(url)\n                console.log(\"Health status from backend---\",res.data)\n                dispatch({\n                    type: 'SUCCESS',\n                    payload: res.data\n                })\n                setCheckHealth(false)\n            }\n            catch (err) {\n                dispatch({\n                    type: 'FAILURE'\n                })\n            }\n\n        }\n        if (checkHealth) {\n            callCheckHealth()\n        }\n\n    }, [checkHealth])\n\n  const handleCheckHealthButton = () =>{\n    setCheckHealth(true)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <button onClick={handleCheckHealthButton}>Check Health</button>\n        <div>Health status : {state.data.status}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}